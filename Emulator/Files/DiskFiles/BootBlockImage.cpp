// -----------------------------------------------------------------------------
// This file is part of vAmiga
//
// Copyright (C) Dirk W. Hoffmann. www.dirkwhoffmann.de
// Licensed under the GNU General Public License v3
//
// See https://www.gnu.org for license information
// -----------------------------------------------------------------------------

#include "BootBlockImage.h"
#include <string.h>
#include <stdio.h>


//
// Bootblock images
//

const u8 os13_bb[] = {
    
  0x44, 0x4f, 0x53, 0x00, 0xc0, 0x20, 0x0f, 0x19, 0x00, 0x00, 0x03, 0x70,
  0x43, 0xfa, 0x00, 0x18, 0x4e, 0xae, 0xff, 0xa0, 0x4a, 0x80, 0x67, 0x0a,
  0x20, 0x40, 0x20, 0x68, 0x00, 0x16, 0x70, 0x00, 0x4e, 0x75, 0x70, 0xff,
  0x60, 0xfa, 0x64, 0x6f, 0x73, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
  0x79
};
    
const u8 os20_bb[] = {
    
  0x44, 0x4f, 0x53, 0x01, 0xe3, 0x3d, 0x0e, 0x72, 0x00, 0x00, 0x03, 0x70,
  0x43, 0xfa, 0x00, 0x3e, 0x70, 0x25, 0x4e, 0xae, 0xfd, 0xd8, 0x4a, 0x80,
  0x67, 0x0c, 0x22, 0x40, 0x08, 0xe9, 0x00, 0x06, 0x00, 0x22, 0x4e, 0xae,
  0xfe, 0x62, 0x43, 0xfa, 0x00, 0x18, 0x4e, 0xae, 0xff, 0xa0, 0x4a, 0x80,
  0x67, 0x0a, 0x20, 0x40, 0x20, 0x68, 0x00, 0x16, 0x70, 0x00, 0x4e, 0x75,
  0x70, 0xff, 0x4e, 0x75, 0x64, 0x6f, 0x73, 0x2e, 0x6c, 0x69, 0x62, 0x72,
  0x61, 0x72, 0x79, 0x00, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f,
  0x6e, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79
};
    
const u8 sca_virus_bb[] = {
    
  0x44, 0x4f, 0x53, 0x00, 0x37, 0xfc, 0xbb, 0x02, 0x43, 0x48, 0x57, 0x21,
  0x41, 0xfa, 0xff, 0xf2, 0x43, 0xf9, 0x00, 0x07, 0xec, 0x00, 0x30, 0x3c,
  0x01, 0x00, 0x22, 0xd8, 0x51, 0xc8, 0xff, 0xfc, 0x4e, 0xb9, 0x00, 0x07,
  0xec, 0x88, 0x43, 0xfa, 0x02, 0xe7, 0x2c, 0x79, 0x00, 0x00, 0x00, 0x04,
  0x4e, 0xae, 0xff, 0xa0, 0x20, 0x40, 0x20, 0x68, 0x00, 0x16, 0x70, 0x00,
  0x4e, 0x75, 0x2c, 0x79, 0x00, 0x00, 0x00, 0x04, 0x08, 0x39, 0x00, 0x06,
  0x00, 0xbf, 0xe0, 0x01, 0x66, 0x1c, 0x42, 0xae, 0x00, 0x2e, 0x61, 0x00,
  0x00, 0x3c, 0x4b, 0xf9, 0x00, 0xdf, 0xf0, 0x00, 0x3b, 0x7c, 0x00, 0x60,
  0x01, 0x80, 0x70, 0x32, 0x61, 0x00, 0x02, 0x46, 0x60, 0x1c, 0x61, 0x00,
  0x00, 0x1c, 0x41, 0xf9, 0x00, 0x07, 0xec, 0xa4, 0xb1, 0xee, 0xfe, 0x3a,
  0x67, 0x0c, 0x23, 0xee, 0xfe, 0x3a, 0x00, 0x07, 0xef, 0xde, 0x2d, 0x48,
  0xfe, 0x3a, 0x4e, 0x75, 0x2d, 0x7c, 0x00, 0x07, 0xec, 0x3e, 0x00, 0x2e,
  0x41, 0xee, 0x00, 0x22, 0x42, 0x40, 0x72, 0x17, 0xd0, 0x58, 0x51, 0xc9,
  0xff, 0xfc, 0x46, 0x40, 0x30, 0x80, 0x4e, 0x75, 0x0c, 0xa9, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x24, 0x66, 0x06, 0xb9, 0xe9, 0x00, 0x28, 0x67, 0x06,
  0x4e, 0xf9, 0x00, 0x07, 0xef, 0xdc, 0x42, 0x94, 0x4e, 0xb9, 0x00, 0x07,
  0xef, 0xdc, 0x0c, 0x94, 0x44, 0x4f, 0x53, 0x00, 0x66, 0x30, 0x2d, 0x79,
  0x00, 0x07, 0xef, 0xde, 0xfe, 0x3a, 0x42, 0xb9, 0x00, 0x07, 0xef, 0xde,
  0x48, 0xe7, 0xff, 0xfc, 0x4b, 0xf9, 0x00, 0xdf, 0xf0, 0x00, 0x41, 0xf9,
  0x00, 0x07, 0xec, 0x04, 0x20, 0x10, 0xb0, 0xac, 0x00, 0x04, 0x67, 0x06,
  0x28, 0x49, 0x61, 0x00, 0x00, 0x08, 0x4c, 0xdf, 0x3f, 0xff, 0x4e, 0x75,
  0x04, 0x79, 0x00, 0x01, 0x00, 0x07, 0xee, 0xfc, 0x06, 0x79, 0x00, 0x01,
  0x00, 0x07, 0xee, 0xf8, 0x30, 0x39, 0x00, 0x07, 0xee, 0xf8, 0x02, 0x40,
  0x00, 0x0f, 0x0c, 0x40, 0x00, 0x00, 0x66, 0x04, 0x61, 0x00, 0x00, 0x52,
  0x22, 0x4c, 0x33, 0x7c, 0x00, 0x01, 0x00, 0x1c, 0x2c, 0x79, 0x00, 0x00,
  0x00, 0x04, 0x4e, 0xae, 0xfe, 0x38, 0x22, 0x4c, 0x33, 0x7c, 0x00, 0x03,
  0x00, 0x1c, 0x23, 0x7c, 0x00, 0x00, 0x04, 0x00, 0x00, 0x24, 0x23, 0x7c,
  0x00, 0x07, 0xec, 0x00, 0x00, 0x28, 0x23, 0x7c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x2c, 0x2c, 0x79, 0x00, 0x00, 0x00, 0x04, 0x4e, 0xae, 0xfe, 0x38,
  0x22, 0x4c, 0x33, 0x7c, 0x00, 0x04, 0x00, 0x1c, 0x2c, 0x79, 0x00, 0x00,
  0x00, 0x04, 0x4e, 0xae, 0xfe, 0x38, 0x4e, 0x75, 0x22, 0x4c, 0x42, 0xa9,
  0x00, 0x24, 0x33, 0x7c, 0x00, 0x09, 0x00, 0x1c, 0x2c, 0x79, 0x00, 0x00,
  0x00, 0x04, 0x4e, 0xae, 0xfe, 0x38, 0x47, 0xf9, 0x00, 0x07, 0xeb, 0x00,
  0x43, 0xf9, 0x00, 0x07, 0xee, 0xfe, 0x42, 0x80, 0x2c, 0x79, 0x00, 0x00,
  0x00, 0x04, 0x4e, 0xae, 0xfd, 0xd8, 0x23, 0xc0, 0x00, 0x07, 0xc8, 0xfc,
  0x22, 0x4b, 0x2c, 0x79, 0x00, 0x07, 0xc8, 0xfc, 0x4e, 0xae, 0xff, 0x3a,
  0x41, 0xf9, 0x00, 0x07, 0xea, 0x00, 0x27, 0x48, 0x00, 0x04, 0x70, 0x01,
  0x32, 0x3c, 0x01, 0x40, 0x34, 0x3c, 0x00, 0xc8, 0x2c, 0x79, 0x00, 0x07,
  0xc8, 0xfc, 0x4e, 0xae, 0xfe, 0x7a, 0x2b, 0x7c, 0x00, 0x07, 0xee, 0xc4,
  0x00, 0x80, 0x3b, 0x7c, 0x08, 0x00, 0x01, 0x82, 0x70, 0x64, 0x61, 0x00,
  0x00, 0xcc, 0x45, 0xf9, 0x00, 0x07, 0xef, 0x1b, 0x41, 0xf9, 0x00, 0x07,
  0xc9, 0x00, 0x23, 0xc8, 0x00, 0x07, 0xea, 0x08, 0x30, 0x3c, 0x07, 0xd0,
  0x42, 0x98, 0x51, 0xc8, 0xff, 0xfc, 0x3b, 0x7c, 0x2e, 0x75, 0x00, 0x8e,
  0x3b, 0x7c, 0xf6, 0xd5, 0x00, 0x90, 0x3b, 0x7c, 0x00, 0x38, 0x00, 0x92,
  0x3b, 0x7c, 0x00, 0xd0, 0x00, 0x94, 0x42, 0xad, 0x01, 0x08, 0x3b, 0x7c,
  0x12, 0x00, 0x01, 0x00, 0x42, 0xad, 0x01, 0x02, 0x3b, 0x7c, 0x83, 0x80,
  0x00, 0x96, 0x22, 0x4b, 0x42, 0x80, 0x10, 0x1a, 0x72, 0x51, 0x2c, 0x79,
  0x00, 0x07, 0xc8, 0xfc, 0x4e, 0xae, 0xff, 0x10, 0x22, 0x4b, 0x42, 0x80,
  0x10, 0x1a, 0x0c, 0x00, 0x00, 0x00, 0x67, 0x50, 0x20, 0x4a, 0x45, 0xf2,
  0x00, 0x00, 0x2c, 0x79, 0x00, 0x07, 0xc8, 0xfc, 0x4e, 0xae, 0xff, 0xc4,
  0x74, 0x07, 0x32, 0x3c, 0x08, 0x00, 0x70, 0x02, 0x61, 0x00, 0x00, 0x4a,
  0x3b, 0x41, 0x01, 0x82, 0x06, 0x41, 0x01, 0x22, 0x51, 0xca, 0xff, 0xf0,
  0x42, 0x80, 0x10, 0x1a, 0x61, 0x00, 0x00, 0x36, 0x74, 0x07, 0x70, 0x02,
  0x61, 0x00, 0x00, 0x2e, 0x04, 0x41, 0x01, 0x22, 0x3b, 0x41, 0x01, 0x82,
  0x51, 0xca, 0xff, 0xf0, 0x42, 0x80, 0x10, 0x1a, 0x61, 0x00, 0x00, 0x1a,
  0x60, 0x00, 0xff, 0x52, 0x20, 0x79, 0x00, 0x07, 0xc8, 0xfc, 0x2b, 0x68,
  0x00, 0x26, 0x00, 0x80, 0x3b, 0x7c, 0x01, 0x00, 0x00, 0x96, 0x4e, 0x75,
  0xd0, 0x40, 0x0c, 0x2d, 0x00, 0x00, 0x00, 0x06, 0x66, 0xf8, 0x0c, 0x2d,
  0x00, 0x00, 0x00, 0x06, 0x67, 0xf8, 0x51, 0xc8, 0xff, 0xee, 0x4e, 0x75,
  0x00, 0xe0, 0x00, 0x07, 0x00, 0xe2, 0xc9, 0x00, 0x70, 0x05, 0xff, 0xfe,
  0x01, 0x80, 0x0e, 0x62, 0x74, 0x05, 0xff, 0xfe, 0x01, 0x80, 0x04, 0x10,
  0x75, 0x05, 0xff, 0xfe, 0x01, 0x80, 0x08, 0x00, 0x86, 0x05, 0xff, 0xfe,
  0x01, 0x80, 0x0d, 0x51, 0x8a, 0x05, 0xff, 0xfe, 0x01, 0x80, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x2a, 0xff, 0xfa, 0xff, 0xd1, 0x67, 0x72,
  0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
  0x72, 0x79, 0x00, 0x64, 0x6f, 0x73, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61,
  0x72, 0x79, 0x00, 0x00, 0x20, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69,
  0x6e, 0x67, 0x20, 0x77, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x66, 0x75, 0x6c,
  0x20, 0x68, 0x61, 0x73, 0x20, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65,
  0x64, 0xd2, 0xaa, 0x2d, 0x17, 0x59, 0x6f, 0x75, 0x72, 0x20, 0x41, 0x4d,
  0x49, 0x47, 0x41, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x69, 0x76, 0x65,
  0x20, 0x21, 0x21, 0x21, 0xbe, 0xa0, 0x41, 0x13, 0x61, 0x6e, 0x64, 0x2c,
  0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x74, 0x65, 0x72,
  0x2e, 0x2e, 0x2e, 0x50, 0x50, 0x04, 0x1f, 0x53, 0x6f, 0x6d, 0x65, 0x20,
  0x6f, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x64, 0x69, 0x73, 0x6b,
  0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x65, 0x63, 0x74,
  0x65, 0x64, 0x6e, 0x32, 0x5a, 0x0e, 0x62, 0x79, 0x20, 0x61, 0x20, 0x56,
  0x49, 0x52, 0x55, 0x53, 0x20, 0x21, 0x21, 0x21, 0x8c, 0x78, 0x32, 0x16,
  0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6d, 0x61, 0x73, 0x74,
  0x65, 0x72, 0x70, 0x69, 0x65, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x82, 0x32,
  0x32, 0x16, 0x54, 0x68, 0x65, 0x20, 0x4d, 0x65, 0x67, 0x61, 0x2d, 0x4d,
  0x69, 0x67, 0x68, 0x74, 0x79, 0x20, 0x53, 0x43, 0x41, 0x20, 0x21, 0x21,
  0xdc, 0x6e, 0x00, 0x00, 0x4e, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x41, 0x21,
  0x53, 0x43, 0x41, 0x21, 0x53, 0x43, 0x41, 0x21, 0x53, 0x43, 0x41, 0x21,
  0x53, 0x43, 0x41, 0x21, 0x53, 0x43, 0x41, 0x21, 0x53, 0x43, 0x41, 0x21,
  0x53, 0x43, 0x41, 0x21
};

const u8 bbandit_virus_bb[] = {

  0x44, 0x4f, 0x53, 0x00, 0x41, 0xd2, 0x5c, 0xca, 0x00, 0x00, 0x03, 0x70,
  0x60, 0x00, 0x00, 0x3e, 0x56, 0x69, 0x72, 0x75, 0x73, 0x20, 0x62, 0x79,
  0x20, 0x42, 0x79, 0x74, 0x65, 0x20, 0x20, 0x20, 0x42, 0x61, 0x6e, 0x64,
  0x69, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x20, 0x39, 0x2e, 0x38, 0x37, 0x2e,
  0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x73, 0x20, 0x3a, 0x00,
  0x00, 0x00, 0x04, 0x69, 0x48, 0xe7, 0x7f, 0x7f, 0x2c, 0x78, 0x00, 0x04,
  0x33, 0xfc, 0x40, 0x00, 0x00, 0xdf, 0xf0, 0x9a, 0x06, 0x2e, 0x00, 0x01,
  0x01, 0x26, 0x30, 0x2e, 0x00, 0x94, 0xc0, 0xbc, 0x00, 0x00, 0x00, 0xf0,
  0xb0, 0x7c, 0x00, 0xf0, 0x66, 0x00, 0x00, 0x40, 0x41, 0xee, 0x01, 0x42,
  0x20, 0x50, 0x22, 0x68, 0x00, 0x18, 0x2a, 0x49, 0x41, 0xfa, 0xff, 0x7e,
  0x45, 0xfa, 0x03, 0x48, 0x12, 0xd8, 0xb5, 0xc8, 0x66, 0xfa, 0x41, 0xfa,
  0xff, 0x70, 0x20, 0x08, 0x41, 0xfa, 0x00, 0x0a, 0x22, 0x08, 0x92, 0x80,
  0xdb, 0xc1, 0x4e, 0xd5, 0x41, 0xfa, 0x03, 0x2c, 0x42, 0x80, 0x20, 0xc0,
  0x20, 0xc0, 0x61, 0x00, 0x00, 0x3e, 0x61, 0x00, 0x00, 0xac, 0x43, 0xfa,
  0x03, 0x0d, 0x4e, 0xae, 0xff, 0xa0, 0x4a, 0x80, 0x67, 0x00, 0x00, 0x24,
  0x20, 0x40, 0x20, 0x68, 0x00, 0x16, 0x04, 0x2e, 0x00, 0x01, 0x01, 0x26,
  0x6c, 0x08, 0x33, 0xfc, 0xc0, 0x00, 0x00, 0xdf, 0xf0, 0x9a, 0x20, 0x3c,
  0x00, 0x00, 0x00, 0x00, 0x4c, 0xdf, 0xfe, 0xfe, 0x4e, 0x75, 0x20, 0x3c,
  0xff, 0xff, 0xff, 0xff, 0x60, 0xf2, 0x33, 0xfc, 0x40, 0x00, 0x00, 0xdf,
  0xf0, 0x9a, 0x06, 0x2e, 0x00, 0x01, 0x01, 0x26, 0x48, 0xe7, 0xc0, 0xfe,
  0x20, 0x3c, 0x00, 0x00, 0x04, 0x00, 0x22, 0x3c, 0x00, 0x00, 0x00, 0x02,
  0x4e, 0xae, 0xff, 0x3a, 0x41, 0xfa, 0x02, 0xd0, 0x20, 0x80, 0x41, 0xee,
  0x01, 0x5e, 0x43, 0xfa, 0x02, 0x98, 0x4e, 0xae, 0xfe, 0xec, 0x4a, 0x80,
  0x67, 0x90, 0x20, 0x40, 0x49, 0xe8, 0xff, 0xe4, 0x4b, 0xfa, 0x02, 0xac,
  0x2a, 0x94, 0x41, 0xfa, 0x00, 0x88, 0x28, 0x88, 0x20, 0x2e, 0x00, 0x94,
  0x41, 0xfa, 0x02, 0xa0, 0x20, 0x80, 0x41, 0xfa, 0x01, 0x8a, 0x2d, 0x48,
  0x00, 0x94, 0x04, 0x2e, 0x00, 0x01, 0x01, 0x26, 0x6c, 0x08, 0x33, 0xfc,
  0xc0, 0x00, 0x00, 0xdf, 0xf0, 0x9a, 0x4c, 0xdf, 0x7f, 0x03, 0x4e, 0x75,
  0x41, 0xfa, 0x02, 0x84, 0x43, 0xe8, 0x00, 0x08, 0x20, 0x89, 0x42, 0xa8,
  0x00, 0x04, 0x2d, 0x48, 0x02, 0x26, 0x32, 0xbc, 0x4a, 0xfc, 0x23, 0x49,
  0x00, 0x02, 0x45, 0xe9, 0x00, 0x1a, 0x23, 0x4a, 0x00, 0x06, 0x13, 0x7c,
  0x00, 0x01, 0x00, 0x0a, 0x13, 0x7c, 0x00, 0x21, 0x00, 0x0b, 0x13, 0x7c,
  0x00, 0x00, 0x00, 0x0c, 0x13, 0x7c, 0x00, 0xf6, 0x00, 0x0d, 0x47, 0xe9,
  0x00, 0x12, 0x23, 0x4b, 0x00, 0x0e, 0x23, 0x7c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x12, 0x47, 0xfa, 0x01, 0xe0, 0x23, 0x4b, 0x00, 0x16, 0x4e, 0xae,
  0xfd, 0x9c, 0x2d, 0x40, 0x02, 0x2a, 0x4e, 0x75, 0x20, 0x29, 0x00, 0x2c,
  0xb0, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x01, 0x00, 0x10, 0x29,
  0x00, 0x1d, 0xb0, 0x3c, 0x00, 0x03, 0x67, 0x00, 0x00, 0x32, 0xb0, 0x3c,
  0x00, 0x02, 0x66, 0x00, 0x00, 0xec, 0x2f, 0x08, 0x20, 0x69, 0x00, 0x18,
  0x10, 0x28, 0x00, 0x41, 0x20, 0x5f, 0x13, 0xc0, 0x00, 0xbf, 0xd1, 0x00,
  0x10, 0x39, 0x00, 0xbf, 0xe0, 0x01, 0x08, 0x00, 0x00, 0x03, 0x67, 0x00,
  0x00, 0xcc, 0x08, 0x00, 0x00, 0x02, 0x67, 0x00, 0x00, 0xc4, 0x48, 0xe7,
  0x40, 0xfe, 0x2c, 0x78, 0x00, 0x04, 0x33, 0xfc, 0x40, 0x00, 0x00, 0xdf,
  0xf0, 0x9a, 0x06, 0x2e, 0x00, 0x01, 0x01, 0x26, 0x13, 0x7c, 0x00, 0x03,
  0x00, 0x1d, 0x26, 0x69, 0x00, 0x28, 0x24, 0x4b, 0x0c, 0xa9, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x24, 0x67, 0x00, 0x00, 0x20, 0x26, 0x7a, 0x01, 0xac,
  0x23, 0x4b, 0x00, 0x28, 0x23, 0x7c, 0x00, 0x00, 0x04, 0x00, 0x00, 0x24,
  0x41, 0xfa, 0xfd, 0xbe, 0x43, 0xfa, 0xff, 0xba, 0x14, 0xd8, 0xb3, 0xc8,
  0x66, 0xfa, 0x24, 0x4b, 0x41, 0xfa, 0xfd, 0xae, 0x43, 0xfa, 0x01, 0x78,
  0x14, 0xd8, 0xb3, 0xc8, 0x66, 0xfa, 0x20, 0x4b, 0x32, 0x3c, 0x00, 0xff,
  0x42, 0x80, 0xd0, 0x98, 0x64, 0x00, 0x00, 0x04, 0x52, 0x80, 0x51, 0xc9,
  0xff, 0xf6, 0x46, 0x80, 0x22, 0x2b, 0x00, 0x04, 0xd2, 0x80, 0x64, 0x00,
  0x00, 0x08, 0xd2, 0xbc, 0x00, 0x00, 0x00, 0x01, 0x27, 0x41, 0x00, 0x04,
  0x41, 0xfa, 0x01, 0x44, 0x0c, 0x50, 0xff, 0xff, 0x67, 0x00, 0x00, 0x14,
  0x06, 0x50, 0x00, 0x01, 0x30, 0x10, 0xb0, 0x7c, 0x00, 0x06, 0x65, 0x00,
  0x00, 0x06, 0x30, 0xbc, 0xff, 0xff, 0x41, 0xfa, 0xfd, 0xa0, 0x06, 0x90,
  0x00, 0x00, 0x00, 0x01, 0x04, 0x2e, 0x00, 0x01, 0x01, 0x26, 0x6c, 0x08,
  0x33, 0xfc, 0xc0, 0x00, 0x00, 0xdf, 0xf0, 0x9a, 0x4c, 0xdf, 0x7f, 0x02,
  0x20, 0x7a, 0x01, 0x10, 0x4e, 0xd0, 0x4b, 0xfa, 0x01, 0x04, 0x0c, 0x55,
  0xff, 0xff, 0x66, 0x00, 0x00, 0x26, 0x4b, 0xfa, 0x00, 0xf6, 0x0c, 0x55,
  0xff, 0xff, 0x66, 0x00, 0x00, 0x1a, 0x4b, 0xfa, 0x00, 0xee, 0x06, 0x95,
  0x00, 0x00, 0x00, 0x01, 0x0c, 0x95, 0x00, 0x00, 0x52, 0x08, 0x65, 0x00,
  0x00, 0x06, 0x61, 0x00, 0x00, 0x08, 0x2a, 0x7a, 0x00, 0xde, 0x4e, 0xd5,
  0x33, 0xfc, 0x40, 0x00, 0x00, 0xdf, 0xf0, 0x9a, 0x06, 0x2e, 0x00, 0x01,
  0x01, 0x26, 0x48, 0xe7, 0xff, 0x00, 0x33, 0xfc, 0x01, 0x00, 0x00, 0xdf,
  0xf0, 0x96, 0x4b, 0xfa, 0x00, 0xb6, 0x42, 0x95, 0x4b, 0xfa, 0x00, 0x88,
  0x10, 0x39, 0x00, 0xbf, 0xed, 0x01, 0x08, 0x00, 0x00, 0x03, 0x67, 0xf4,
  0x10, 0x39, 0x00, 0xbf, 0xec, 0x01, 0x00, 0x39, 0x00, 0x40, 0x00, 0xbf,
  0xee, 0x01, 0x46, 0x00, 0xe2, 0x18, 0x32, 0x3c, 0x06, 0x00, 0x33, 0xfc,
  0x00, 0xd1, 0x0d, 0xff, 0x01, 0x80, 0x51, 0xc9, 0xff, 0xf6, 0x02, 0x39,
  0x00, 0xbf, 0x00, 0xbf, 0xee, 0x01, 0x12, 0x1d, 0xb2, 0x00, 0x66, 0xc0,
  0x0c, 0x15, 0x00, 0xff, 0x67, 0x00, 0x00, 0x04, 0x60, 0xba, 0x33, 0xfc,
  0x81, 0x00, 0x00, 0xdf, 0xf0, 0x96, 0x4c, 0xdf, 0x00, 0xff, 0x04, 0x2e,
  0x00, 0x01, 0x01, 0x26, 0x6c, 0x08, 0x33, 0xfc, 0xc0, 0x00, 0x00, 0xdf,
  0xf0, 0x9a, 0x4e, 0x75, 0x41, 0xfa, 0x00, 0x46, 0x30, 0x10, 0xb0, 0x7c,
  0x00, 0x02, 0x64, 0x00, 0x00, 0x10, 0x06, 0x50, 0x00, 0x01, 0x2c, 0x78,
  0x00, 0x04, 0x61, 0x00, 0xfd, 0x4a, 0x4e, 0x75, 0x30, 0xbc, 0xff, 0xff,
  0x60, 0xf0, 0x64, 0x66, 0x40, 0x67, 0x65, 0xff, 0x74, 0x72, 0x61, 0x63,
  0x6b, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
  0x00, 0x64, 0x6f, 0x73, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79
};


//
// Bootblock signatures
//

const BBRecord bbRecord[] = {

    {
        "No Boot Block",
        { 6,0,7,0,8,0,9,0,10,0,11,0,12,0 },
        nullptr, 0, BB_STANDARD
    },

    //
    // Standard boot blocks
    //
    
    {
        "AmigaDOS Standard Bootblock 1.3",
        { 4,0xc0, 5,0x20, 6,0x0f, 7,0x19, 8,0x00, 9,0x00, 10,0x03},
        os13_bb, sizeof(os13_bb), BB_STANDARD
    },
    {
        "AmigaDOS Standard Bootblock 2.0",
        { 4,0xe3, 5,0x3d, 6,0x0e, 7,0x72, 8,0x00, 9,0x00, 10,0x03 },
        os20_bb, sizeof(os20_bb), BB_STANDARD
    },
    
    //
    // Viruses
    //

    {
        "SCA Virus",
        { 800,101,822,97,900,115,841,71,217,231,9,72,435,7 },
        sca_virus_bb, sizeof(sca_virus_bb), BB_VIRUS
    },
    {
        "Byte Bandit 1 Virus",
        { 18,114,25,66,32,66,35,100,335,252,513,196,639,188 },
        bbandit_virus_bb, sizeof(bbandit_virus_bb), BB_VIRUS
    }
};


BootBlockImage::BootBlockImage(const u8 *buffer)
{
    memcpy(data, buffer, 1024);
    size_t i,j;
    
    for (i = 0; i < sizeof(bbRecord) / sizeof(BBRecord); i++) {
                
        for (j = 0; j < 7; j++) {
            
            u16 pos = bbRecord[i].signature[2*j];
            u16 val = bbRecord[i].signature[2*j + 1];
            if (pos && data[pos] != val) break;
        }
        
        if (j == 7) {
            
            this->type = bbRecord[i].type;
            this->name = bbRecord[i].name;
            return;
        }
    }
}

BootBlockImage::BootBlockImage(const char *name)
{
    memset(data, 0, 1024);
    
    for (size_t i = 0; i < sizeof(bbRecord) / sizeof(BBRecord); i++) {
        
        if (strcmp(bbRecord[i].name, name) == 0) {
            memcpy(this->data, bbRecord[i].image, bbRecord[i].size);
            this->type = bbRecord[i].type;
            this->name = bbRecord[i].name;
            return;
        }
    }
}

BootBlockImage::BootBlockImage(long bootBlockID)
{
    memset(data, 0, 1024);
    const char *name;
    
    switch (bootBlockID) {
            
        case 0:  name = "AmigaDOS Standard Bootblock 1.3"; break;
        case 1:  name = "AmigaDOS Standard Bootblock 2.0"; break;
        case 10: name = "SCA Virus";                       break;
        case 11: name = "Byte Bandit 1 Virus";             break;
        default: name = "";                                break;
    }
    
    BootBlockImage bb = BootBlockImage(name);
    *this = bb;
}

void
BootBlockImage::write(u8 *buffer, size_t first, size_t last)
{
    assert(first < last && last < 1024);
    
    for (size_t i = 0; i < last - first; i++) {
        buffer[i] = data[first + i];
    }
}
